version: "3.0"
services:
  db:
    image: postgres
    container_name: go-web-101-db
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    profiles:
      - dependencies
    volumes:
      - go-web-101-db-volumes:/var/lib/postgresql/data
    networks:
      - go-web-101-network
    ports:
      - "5432:5432"
    expose:
      - 5432
    restart: always
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5

  product-service:
    build:
      context: ..
      dockerfile: ./deployment/app.Dockerfile
      args:
        - SERVICE_NAME=product_service
        - SERVICE_PORT=8080
    # Command will be appended to entrypoint as arg
    command: ["product_service"]
    ports:
      - 8080:8080
    networks:
      - go-web-101-network
    profiles:
      - "app"
    depends_on:
      - db
    restart: always

  order-service:
    build:
      context: ..
      dockerfile: ./deployment/app.Dockerfile
      args:
        - SERVICE_NAME=order_service
        - SERVICE_PORT=8081
    # Command will be appended to entrypoint as arg
    command: ["order_service"]
    ports:
      - 8081:8081
    networks:
      - go-web-101-network
    profiles:
      - "app"
    depends_on:
      - db
    restart: always

networks:
  go-web-101-network:
    driver: bridge

volumes:
  go-web-101-db-volumes:
    driver: local